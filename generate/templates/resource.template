package resources

import (
	"errors"

	"github.com/mitchellh/mapstructure"
)

// {{.Name}} AWS CloudFormation Resource
// See: {{.Resource.Documentation}}
type {{.StructName}} struct {
    {{range $name, $property := .Resource.Properties}}
    // {{$name}} AWS CloudFormation Property
    // Required: {{$property.Required}}
    // See: {{$property.Documentation}}
        {{if $property.IsMap}}
            {{if $property.IsMapOfPrimitives}}
                {{$name}} map[string]{{$property.GetGoPrimitiveType}} `json:"{{$name}}"`
            {{else}}
                {{if eq $property.ItemType "Tag"}}
                    {{$name}} map[string]Tag `json:"{{$name}}"`
                {{else}}
                    {{$name}} map[string]{{$.Basename}}_{{$property.ItemType}} `json:"{{$name}}"`
                {{end}}
            {{end}}
        {{end}}
        {{if $property.IsList}}
            {{if $property.IsListOfPrimitives}}
                {{$name}} []{{$property.GetGoPrimitiveType}} `json:"{{$name}}"`
            {{else}}
                {{if eq $property.ItemType "Tag"}}
                    {{$name}} []Tag `json:"{{$name}}"`
                {{else}}
                    {{$name}} []{{$.Basename}}_{{$property.ItemType}} `json:"{{$name}}"`
                {{end}}
            {{end}}
        {{end}}
        {{if $property.IsCustomType}}
            {{$name}} {{$.Basename}}_{{$property.Type}} `json:"{{$name}}"`
        {{end}}
        {{if $property.IsPrimitive}}
            {{$name}} {{$property.GetGoPrimitiveType}} `json:"{{$name}}"`
        {{end}}
    {{end}}
}

// AWSCloudFormationType returns the AWS CloudFormation resource type
func (r *{{.StructName}}) AWSCloudFormationType() string {
    return "{{.Name}}"
}

// AWSCloudFormationSpecificationVersion returns the AWS Specification Version that this resource was generated from
func (r *{{.StructName}}) AWSCloudFormationSpecificationVersion() string {
    return "{{.Version}}"
}

// GetAll{{.StructName}}Resources retrieves all {{.StructName}} items from a CloudFormation template
func GetAll{{.StructName}} (template *Template) map[string]*{{.StructName}} {

    results := map[string]*{{.StructName}}{}
	for name, resource := range template.Resources {
		result := &{{.StructName}}{}
		if err := mapstructure.Decode(resource, result); err == nil {
			results[name] = result
		}
	}
	return results

}

// Get{{.StructName}}WithName retrieves all {{.StructName}} items from a CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func GetWithName{{.StructName}} (name string, template *Template) (*{{.StructName}}, error) {

    result := &{{.StructName}}{}
	if resource, ok := template.Resources[name]; ok {
		if err := mapstructure.Decode(resource, result); err == nil {
			return result, nil
		}
	}

    return &{{.StructName}}{}, errors.New("resource not found")

}